#!/bin/bash

function check_db_exist {
	DBS=`mysql -uroot -p$2 -Bse 'show databases'| egrep -v 'information_schema|mysql'`
	for db in $DBS; do
		if [ "$db" = $1 ]; then
			return 1
		fi
	done

	return 0

}

function pre_startup {
	############################################################################# 
	# Server info
	#############################################################################

	read -p "What is the actual domain of the website: " domain

	############################################################################# 
	# Check settings
	#############################################################################


	#Check vhost exist
	if [ -f $APACHEDIR/other/$1.$SERVER.conf ]; then
	  echo vhost $1.$SERVER is already existed
	  exit
	fi

	#Check project directory exist
	if [ -d $WWW/$1 ]; then
	  echo Folder $1 is already existed
	  exit
	fi

	#Check drush settings
	if [ ! -d /Users/$USER/.drush ]; then
		echo ".drush folder not found"
		exit
	fi

	#Check db exist

	read -s -p "Enter mysql root password: " rootpass

	#Test mysql connection
	while ! mysql -u root -p$rootpass  -e ";" ; do
	       read -s -p "Can't connect, please retry: " rootpass
	done
	echo "";

	check_db_exist $1_db $rootpass
	db_exist=$?

	if [ $db_exist = 1 ]; then	
		echo database $1_db alread exist
		exit
	fi

	############################################################################# 
	# Setup vhost, host alias & drush alias
	#############################################################################

	#Add vhost
	 echo "<VirtualHost *:80>
	    DocumentRoot $WWW/$1 
	    ServerName $1.localhost
	    <Directory $WWW/$1>
	        AllowOverride All
	    </Directory>
	</VirtualHost>
	" | sudo tee -a $APACHEDIR/other/$1.$SERVER.conf

	sudo apachectl restart

	#Add host alias
	if [ ! $(grep -q "$1.$SERVER" /etc/hosts) ]; then
	  echo -e "127.0.0.1	$1.$SERVER" | sudo tee -a /etc/hosts
	fi

	#Add drush alias
	echo "<?php
	\$aliases['$1'] = array(
	    'uri' => '$1.$SERVER',
	    'root' => '$WWW/$1',
	  );

	\$aliases['$1.dev'] = array(
	    'uri' => 'dev.$domain',
		'root' => '/home/$1/dev',
		'ssh-options' => '-p 222',
	    'remote-host' => 'dev.$domain',
		'remote-user' => '$1',
		'path-aliases' => array(
			'%dump-dir' => '/home/$1/sql_dump',
	     ),
	  );

	\$aliases['$1.live'] = array(
	    'uri' => '$domain',
		'root' => '/home/$1/www',
		'ssh-options' => '-p 222',
	    'remote-host' => '$domain',
		'remote-user' => '$1',
		'path-aliases' => array(
			'%dump-dir' => '/home/$1/sql_dump',
	     ),
	  );

	" > /Users/$USER/.drush/$1.aliases.drushrc.php 

	############################################################################# 
	# Create database & user
	#############################################################################


	#Setup variables required
	rand=$RANDOM

	dbname=$1_db
	dbuser=$1_user
	dbpass=$(perl -e 'print crypt($ARGV[0], "password")' $rand | sed 's/\///g')
	drupaluser='Site Admin'

	#CREATE DB
	mysqladmin -uroot -p$rootpass create $dbname;
	echo "Database $dbname created, $dbuser - $dbpass"

	#CREATE USER
	Q1="GRANT USAGE ON * . * TO  '$dbuser'@'localhost' IDENTIFIED BY  '$dbpass';" 
	Q2="GRANT ALL PRIVILEGES ON $dbname.* TO '$dbuser'@'localhost' IDENTIFIED BY '$dbpass';"
	SQL="${Q1}${Q2}"

	mysql -uroot -p$rootpass -e "$SQL"
	
}

#push workspace
function pushws {
	
	git co kelvin
	
	#git add .
	#git add -u
	
	#git commit
	
	git tag -a $1 -m 'version $1'
	
	git push kw kelvin

	git push --tags kw

	git co master
	git pull in master
	
	git merge kelvin
	
	git reset in/master
	
	git add .
	git add -u
	
	git commit
	
	git push in master
	
	git push --tags in
	
	git co kelvin
	
	git merge master
} 

#push ip
function puship {
	
	#Check project directory exist
	if [ ! -d $WWW/$1 ]; then
	  echo Folder $1 is not existed
	  exit
	fi
	
	cd $WWW/$1
	
	git co master
	
	if [ "$2" = "dev" ]; then
		git push kw master
		
	elif [ "$2" = "unimelb" ]; then
		git co unimelb
		git push kw unimelb
	else
		update_info_version $1 $2

		update_ip_update_info_version $1 $2

		update_ip_config_info_version $1 $2

		git commit -am 'version '$2

		git tag -a $2 -m 'version $2'

		git push kw master

		git push --tags kw	

		git co $PRESET_BRANCH
		git pull in $PRESET_BRANCH

		git merge master

		git reset in/$PRESET_BRANCH

		git add .
		git add -u

		git commit

		git push in $PRESET_BRANCH

		git push --tags in

		git co master

		git merge $PRESET_BRANCH
		
	fi
		
}


function update_info_version {
	
	infofile=$(drush @$1 dd)/profiles/ip/ip.info

	version=$(cat $infofile | grep "version"| awk '{ print $3 }')
	
	sed 's/'$version'/"'$2'"/g' $infofile > tmp
	mv tmp $infofile
	
	rm -f tmp
}


function update_ip_update_info_version {
	
	infofile=$(drush @$1 dd)/profiles/ip/modules/developer/ip_update/ip_update.info

	version=$(cat $infofile | grep "version"| awk '{ print $3 }')
	
	sed 's/'$version'/"'$2'"/g' $infofile > tmp
	mv tmp $infofile
	
	rm -f tmp
}

function update_ip_config_info_version {
	
	infofile=$(drush @$1 dd)/profiles/ip/modules/developer/ip_config/ip_config.info

	version=$(cat $infofile | grep "version"| awk '{ print $3 }')
	
	sed 's/'$version'/"'$2'"/g' $infofile > tmp
	mv tmp $infofile
	
	rm -f tmp
}



