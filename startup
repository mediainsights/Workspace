#!/bin/bash
#PATH="/usr/local/bin:/usr/local/sbin:/usr/local/mysql/bin:$PATH" >> ~/.bash_profile
source ~/.bash_profile


#Usage check
: ${1?"Usage: $0 SITE"}

source includes/config

#Check vhost exist
if [ -f $APACHEDIR/other/$1.$SERVER.conf ]; then
  echo vhost $1.$SERVER is already existed
  exit
fi

#Check project directory exist
if [ -d $WWW/$1 ]; then
  echo Folder $1 is already existed
#  exit
fi

#Check drush settings
if [ ! -d /Users/$USER/.drush ]; then
	echo ".drush folder not found"
	exit
fi

######## Pass all tests ########

function check_db_exist {
	DBS=`mysql -uroot -p$rootpass -Bse 'show databases'| egrep -v 'information_schema|mysql'`
	for db in $DBS; do
		if [ "$db" = $1 ]; then
		    echo 1
			return
		fi
	done

	echo 0

}


#Add remote repositries if not exists.
for index in ${!REPOS[*]}
do
	repo_exist=$(git remote|grep ${REPOS_SHORTNAME[$index]})
	
	if [ -z "$repo_exist" ]; then 
		git remote add ${REPOS_SHORTNAME[$index]} ${REPOS[$index]}
		
	fi
done

#Fetch remote repositries
echo "Updating remote repositries"
for index in ${!REPOS[*]}
do
	git fetch ${REPOS_SHORTNAME[$index]}
done

echo "Which repositry do you want to use?"
for index in ${!REPOS[*]}
do
    printf "%4s: %s - %s\n" $index ${REPOS_SHORTNAME[$index]} ${REPOS[$index]}
done

#Argument check
if [ -z "$2" ]; then 

	read -p "Do you want to use the latest dev or the latest stable release? (dev/stable):" dev_stable
	
	while [ "$dev_stable" != "dev" ] && [ "$dev_stable" != "stable" ]; do
	       read -p "dev or stable ?: " dev_stable
	done

else
	dev_stable=$2
fi

branch=$(cat version|grep "branch"|awk '{ print $2 }')
#branch=master

if [ $dev_stable == stable ]; then
	tag=$(cat version|grep "stable"|awk '{ print $2 }')
fi

#Add vhost
 echo "<VirtualHost *:80>
    DocumentRoot $WWW/$1 
    ServerName $1.localhost
    <Directory $WWW/$1>
        AllowOverride All
    </Directory>
</VirtualHost>
" | sudo tee -a $APACHEDIR/other/$1.$SERVER.conf

sudo apachectl restart

#Add host alias
if [ ! $(grep -q "$1.$SERVER" /etc/hosts) ]; then
  echo -e "127.0.0.1	$1.$SERVER" | sudo tee -a /etc/hosts
fi

#Add drush alias
echo "<?php
\$aliases['$1'] = array(
    'uri' => '$1.$SERVER',
    'root' => '$WWW/$1',
  );" > /Users/$USER/.drush/$1.aliases.drushrc.php 


#Clone INprofile from github
echo Clone $branch branch
git clone --branch $branch $REPOS $WWW/$1	

#checkout tag for stable
if [ $dev_stable == stable ]; then
	cd $WWW/$1
	git co $tag
	git co -b $tag
fi

#Create Database
read -s -p "Enter mysql root password: " rootpass

#Test mysql connection
while ! mysql -u root -p$rootpass  -e ";" ; do
       read -s -p "Can't connect, please retry: " rootpass
done

echo "";

#Setup variables required
rand=$RANDOM

dbname=$1_db
dbuser=$1_user
dbpass=$(perl -e 'print crypt($ARGV[0], "password")' $rand | sed 's/\///g')
drupaluser='Site Admin'

#Check if db exists
n=1
while [ `check_db_exist $dbname` = 1 ]; do
	dbname=$1_db$n
	dbuser=$1_user$n
	let n+=1
done

#CREATE DB
mysqladmin -uroot -p$rootpass create $dbname;
echo "Database $dbname created, $dbpass"

#CREATE USER
Q1="GRANT USAGE ON * . * TO  '$dbuser'@'localhost' IDENTIFIED BY  '$dbpass';" 
Q2="GRANT ALL PRIVILEGES ON $dbname.* TO '$dbuser'@'localhost' IDENTIFIED BY '$dbpass';"
SQL="${Q1}${Q2}"

mysql -uroot -p$rootpass -e "$SQL"

# Get ready for Drupal installation
chmod 755 $WWW/$1/sites/default

#Optional settings for manual druapl install
#mkdir $WWW/$1/sites/default/files
#chmod 777 $WWW/$1/sites/default/files
#cp $WWW/$1/sites/default/default.settings.php $WWW/$1/sites/default/settings.php
#chmod 777 $WWW/$1/sites/default/settings.php


#INSTALL DRUPAL
drush @$1 site-install ip --db-url=mysql://$dbuser:"$dbpass"@localhost/$dbname --account-name="$drupaluser" --account-pass=$dbpass --sites-subdir=$1.$SERVER -y

#Check if Drupal install successfully
status=$(drush @$1 status|grep "Drupal bootstrap"|awk '{ print $4 }')

if [ "$status" = "Successful" ]; then	
	
	#drupal directory
	dd=$(drush @$1 dd)

	#Make files directory writable
	chmod -R 777 `drush @$1 dd files`
	chmod 755 $dd/sites/default
	chmod 755 $dd/sites/$1.$SERVER
	
	#Enable ipdeploy
	#drush @$1 en ipdeploy --yes

	#Make everthing in files directory writable
	chmod -R 777 `drush @$1 dd files`

	drush @$1 cron
else
	echo Drupal fail to install.
	exit
fi


#Report
echo "Database created: $dbname"
echo "Drupal was installed successfully: "
drush @$1 user-login;